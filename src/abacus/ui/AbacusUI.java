/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ui.java
 *
 * Created on Jul 19, 2010, 11:26:35 AM
 */

package abacus.ui;

import abacus.Abacus;
import abacus.Globals;
import abacus.HyperSQLObject;
import abacus.HyperSQLObjectGene;
import abacus.console.AbacusTextArea;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dfermin
 */
public class AbacusUI extends javax.swing.JFrame {

    // file and folder chooser for this program
    final JFileChooser fc = new JFileChooser();

    WorkerThread t;

    /** Creates new form ui */
    public AbacusUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outputRBgroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        srcDirPanel = new javax.swing.JPanel();
        srcDirTextField = new javax.swing.JTextField();
        srcDirBrowseButton = new javax.swing.JButton();
        SrcDirLabel = new javax.swing.JLabel();
        genePanel = new javax.swing.JPanel();
        GeneMapLabel = new javax.swing.JLabel();
        gene2protTextField = new javax.swing.JTextField();
        gene2protBrowseButton = new javax.swing.JButton();
        combinedFilePanel = new javax.swing.JPanel();
        CombinedFileLabel = new javax.swing.JLabel();
        combinedFileTextField = new javax.swing.JTextField();
        combinedFileBrowseButton = new javax.swing.JButton();
        outputFilePanel = new javax.swing.JPanel();
        outputFileTextField = new javax.swing.JTextField();
        outputFileButton = new javax.swing.JButton();
        outputFileLabel = new javax.swing.JLabel();
        FastaPanel = new javax.swing.JPanel();
        FastaFileLabel = new javax.swing.JLabel();
        fastaTextField = new javax.swing.JTextField();
        fastaBrowseButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        dbNameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        decoyTagTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        pepRegexTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        iniProbTHlabel = new javax.swing.JLabel();
        iniProbTextField = new javax.swing.JTextField();
        epiTextField = new javax.swing.JTextField();
        epiLabel = new javax.swing.JLabel();
        combinedFilePwLabel = new javax.swing.JLabel();
        minCombinedFilePwTextField = new javax.swing.JTextField();
        maxIniProbTextField = new javax.swing.JTextField();
        maxiniProbLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4_customOutput = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        protLenCB = new javax.swing.JCheckBox();
        numXMLCB = new javax.swing.JCheckBox();
        maxIniProbCB = new javax.swing.JCheckBox();
        isFwdCB = new javax.swing.JCheckBox();
        geneidCB = new javax.swing.JCheckBox();
        protidCB = new javax.swing.JCheckBox();
        deflineCB = new javax.swing.JCheckBox();
        maxPwCB = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        ALL_numPepsUniqCB = new javax.swing.JCheckBox();
        ALL_IDCB = new javax.swing.JCheckBox();
        maxIniProbUniqCB = new javax.swing.JCheckBox();
        ALL_numPepsTotCB = new javax.swing.JCheckBox();
        ALL_localPwCB = new javax.swing.JCheckBox();
        wt_maxIniProbCB = new javax.swing.JCheckBox();
        ALL_PwCB = new javax.swing.JCheckBox();
        ALL_numSpecsTotCB = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        Expt_numSpecsTotCB = new javax.swing.JCheckBox();
        Expt_numPepsTotCB = new javax.swing.JCheckBox();
        Expt_PwCB = new javax.swing.JCheckBox();
        Expt_numPepsUniqCB = new javax.swing.JCheckBox();
        Expt_IDCB = new javax.swing.JCheckBox();
        Expt_numSpecsUniqCB = new javax.swing.JCheckBox();
        ALL_numSpecsUniqCB = new javax.swing.JCheckBox();
        Expt_numSpecsAdjCB = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        defaultOutputRB = new javax.swing.JRadioButton();
        geneRB = new javax.swing.JRadioButton();
        peptideOutputRB = new javax.swing.JRadioButton();
        qspecRB_prot = new javax.swing.JRadioButton();
        qspecRB_gene = new javax.swing.JRadioButton();
        customRB = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        RunButton = new javax.swing.JButton();
        SaveParamsButton = new javax.swing.JButton();
        clearFormButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        keepDBCB = new javax.swing.JCheckBox();
        nsafCB = new javax.swing.JCheckBox();
        verboseResultsCB = new javax.swing.JCheckBox();
        recalcPepWtCB = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        paramFileTextField = new javax.swing.JTextField();
        paramFileBrowseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Abacus Main Menu"));

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel10.setPreferredSize(new java.awt.Dimension(432, 244));

        srcDirBrowseButton.setText("Select Folder");
        srcDirBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcDirBrowseButtonActionPerformed(evt);
            }
        });

        SrcDirLabel.setText("Source Directory:");

        javax.swing.GroupLayout srcDirPanelLayout = new javax.swing.GroupLayout(srcDirPanel);
        srcDirPanel.setLayout(srcDirPanelLayout);
        srcDirPanelLayout.setHorizontalGroup(
            srcDirPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(srcDirPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SrcDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srcDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(srcDirBrowseButton)
                .addContainerGap())
        );
        srcDirPanelLayout.setVerticalGroup(
            srcDirPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(srcDirPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(srcDirPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(SrcDirLabel)
                    .addComponent(srcDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(srcDirBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GeneMapLabel.setForeground(new java.awt.Color(0, 51, 204));
        GeneMapLabel.setText("Gene Map File:");

        gene2protBrowseButton.setText("Select File");
        gene2protBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gene2protBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout genePanelLayout = new javax.swing.GroupLayout(genePanel);
        genePanel.setLayout(genePanelLayout);
        genePanelLayout.setHorizontalGroup(
            genePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GeneMapLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gene2protTextField)
                .addGap(18, 18, 18)
                .addComponent(gene2protBrowseButton)
                .addContainerGap())
        );
        genePanelLayout.setVerticalGroup(
            genePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(genePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(genePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(GeneMapLabel)
                    .addComponent(gene2protTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gene2protBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CombinedFileLabel.setText("Combined File:");

        combinedFileBrowseButton.setText("Select File");
        combinedFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinedFileBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout combinedFilePanelLayout = new javax.swing.GroupLayout(combinedFilePanel);
        combinedFilePanel.setLayout(combinedFilePanelLayout);
        combinedFilePanelLayout.setHorizontalGroup(
            combinedFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(combinedFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CombinedFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combinedFileTextField)
                .addGap(18, 18, 18)
                .addComponent(combinedFileBrowseButton)
                .addContainerGap())
        );
        combinedFilePanelLayout.setVerticalGroup(
            combinedFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(combinedFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(combinedFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(CombinedFileLabel)
                    .addComponent(combinedFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combinedFileBrowseButton))
                .addContainerGap())
        );

        outputFileTextField.setText("ABACUS_output.tsv");

        outputFileButton.setText("Select File");
        outputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileButtonActionPerformed(evt);
            }
        });

        outputFileLabel.setText("OutputFile:");

        javax.swing.GroupLayout outputFilePanelLayout = new javax.swing.GroupLayout(outputFilePanel);
        outputFilePanel.setLayout(outputFilePanelLayout);
        outputFilePanelLayout.setHorizontalGroup(
            outputFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(outputFileButton)
                .addContainerGap())
        );
        outputFilePanelLayout.setVerticalGroup(
            outputFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(outputFileLabel)
                    .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileButton))
                .addContainerGap())
        );

        FastaFileLabel.setForeground(new java.awt.Color(0, 51, 204));
        FastaFileLabel.setText("FASTA File:");

        fastaBrowseButton.setText("Select File");
        fastaBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FastaPanelLayout = new javax.swing.GroupLayout(FastaPanel);
        FastaPanel.setLayout(FastaPanelLayout);
        FastaPanelLayout.setHorizontalGroup(
            FastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FastaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FastaFileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fastaTextField)
                .addGap(18, 18, 18)
                .addComponent(fastaBrowseButton)
                .addContainerGap())
        );
        FastaPanelLayout.setVerticalGroup(
            FastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FastaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(FastaFileLabel)
                    .addComponent(fastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fastaBrowseButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(outputFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combinedFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FastaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(srcDirPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(srcDirPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FastaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(combinedFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dbNameTextField.setText("ABACUSDB");

        jLabel1.setText("dbName:");

        decoyTagTextField.setText("rev_");

        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setLabelFor(decoyTagTextField);
        jLabel2.setText("Decoy Tag:");

        jLabel14.setForeground(new java.awt.Color(0, 51, 204));
        jLabel14.setText("Required AA Modifications:");

        jLabel16.setText("Example: +S[167]; -M[147]");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pepRegexTextField)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16))
                        .addGap(0, 129, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decoyTagTextField)
                            .addComponent(dbNameTextField))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(decoyTagTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pepRegexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {decoyTagTextField, jLabel2});

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        iniProbTHlabel.setText("Min. Peptide Prob >=");

        iniProbTextField.setText("0.50");

        epiTextField.setText("0");

        epiLabel.setText("Expt. Peptide Prob >=");

        combinedFilePwLabel.setText("Combined File Prob >=");

        minCombinedFilePwTextField.setText("0.90");

        maxIniProbTextField.setText("0.99");

        maxiniProbLabel.setText("Best Peptide Prob >=");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combinedFilePwLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(maxiniProbLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iniProbTHlabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(epiLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxIniProbTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(iniProbTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(epiTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minCombinedFilePwTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxiniProbLabel)
                    .addComponent(maxIniProbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iniProbTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iniProbTHlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epiLabel)
                    .addComponent(epiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combinedFilePwLabel)
                    .addComponent(minCombinedFilePwTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Options"));
        jPanel2.setPreferredSize(new java.awt.Dimension(1000, 547));

        jPanel4_customOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Desired Output Fields (Custom Output Only)"));

        protLenCB.setText("ProtLen");
        protLenCB.setEnabled(false);
        protLenCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protLenCBActionPerformed(evt);
            }
        });

        numXMLCB.setText("numXML");
        numXMLCB.setEnabled(false);
        numXMLCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numXMLCBActionPerformed(evt);
            }
        });

        maxIniProbCB.setText("maxIniProb");
        maxIniProbCB.setEnabled(false);
        maxIniProbCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxIniProbCBActionPerformed(evt);
            }
        });

        isFwdCB.setText("isFwd");
        isFwdCB.setEnabled(false);
        isFwdCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isFwdCBActionPerformed(evt);
            }
        });

        geneidCB.setText("GeneID");
        geneidCB.setEnabled(false);
        geneidCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneidCBActionPerformed(evt);
            }
        });

        protidCB.setText("ProtID");
        protidCB.setEnabled(false);
        protidCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protidCBActionPerformed(evt);
            }
        });

        deflineCB.setText("defline");
        deflineCB.setEnabled(false);
        deflineCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deflineCBActionPerformed(evt);
            }
        });

        maxPwCB.setText("maxPw");
        maxPwCB.setEnabled(false);
        maxPwCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxPwCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(protidCB)
                    .addComponent(geneidCB)
                    .addComponent(protLenCB)
                    .addComponent(isFwdCB)
                    .addComponent(deflineCB)
                    .addComponent(numXMLCB)
                    .addComponent(maxPwCB)
                    .addComponent(maxIniProbCB))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(protidCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geneidCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(protLenCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isFwdCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deflineCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numXMLCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxPwCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxIniProbCB)
                .addContainerGap())
        );

        ALL_numPepsUniqCB.setText("ALL_numPepsUniq");
        ALL_numPepsUniqCB.setEnabled(false);
        ALL_numPepsUniqCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_numPepsUniqCBActionPerformed(evt);
            }
        });

        ALL_IDCB.setText("ALL_ID");
        ALL_IDCB.setEnabled(false);
        ALL_IDCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_IDCBActionPerformed(evt);
            }
        });

        maxIniProbUniqCB.setText("maxIniProbUniq");
        maxIniProbUniqCB.setEnabled(false);
        maxIniProbUniqCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxIniProbUniqCBActionPerformed(evt);
            }
        });

        ALL_numPepsTotCB.setText("ALL_numPepsTot");
        ALL_numPepsTotCB.setEnabled(false);
        ALL_numPepsTotCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_numPepsTotCBActionPerformed(evt);
            }
        });

        ALL_localPwCB.setText("ALL_localPw");
        ALL_localPwCB.setEnabled(false);
        ALL_localPwCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_localPwCBActionPerformed(evt);
            }
        });

        wt_maxIniProbCB.setText("wt_maxIniProb");
        wt_maxIniProbCB.setEnabled(false);
        wt_maxIniProbCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wt_maxIniProbCBActionPerformed(evt);
            }
        });

        ALL_PwCB.setText("ALL_Pw");
        ALL_PwCB.setEnabled(false);
        ALL_PwCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_PwCBActionPerformed(evt);
            }
        });

        ALL_numSpecsTotCB.setText("ALL_numSpecsTot");
        ALL_numSpecsTotCB.setEnabled(false);
        ALL_numSpecsTotCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_numSpecsTotCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ALL_PwCB)
                    .addComponent(ALL_localPwCB)
                    .addComponent(ALL_IDCB)
                    .addComponent(wt_maxIniProbCB)
                    .addComponent(maxIniProbUniqCB)
                    .addComponent(ALL_numPepsTotCB)
                    .addComponent(ALL_numPepsUniqCB)
                    .addComponent(ALL_numSpecsTotCB))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(wt_maxIniProbCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxIniProbUniqCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_IDCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_PwCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_localPwCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_numPepsTotCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_numPepsUniqCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ALL_numSpecsTotCB)
                .addContainerGap())
        );

        Expt_numSpecsTotCB.setText("Expt_numSpecsTot");
        Expt_numSpecsTotCB.setEnabled(false);
        Expt_numSpecsTotCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_numSpecsTotCBActionPerformed(evt);
            }
        });

        Expt_numPepsTotCB.setText("Expt_numPepsTot");
        Expt_numPepsTotCB.setEnabled(false);
        Expt_numPepsTotCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_numPepsTotCBActionPerformed(evt);
            }
        });

        Expt_PwCB.setText("Expt_Pw");
        Expt_PwCB.setEnabled(false);
        Expt_PwCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_PwCBActionPerformed(evt);
            }
        });

        Expt_numPepsUniqCB.setText("Expt_numPepsUniq");
        Expt_numPepsUniqCB.setEnabled(false);
        Expt_numPepsUniqCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_numPepsUniqCBActionPerformed(evt);
            }
        });

        Expt_IDCB.setText("Expt_ID");
        Expt_IDCB.setEnabled(false);
        Expt_IDCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_IDCBActionPerformed(evt);
            }
        });

        Expt_numSpecsUniqCB.setText("Expt_numSpecsUniq");
        Expt_numSpecsUniqCB.setEnabled(false);
        Expt_numSpecsUniqCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_numSpecsUniqCBActionPerformed(evt);
            }
        });

        ALL_numSpecsUniqCB.setText("ALL_numSpecsUniq");
        ALL_numSpecsUniqCB.setEnabled(false);
        ALL_numSpecsUniqCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALL_numSpecsUniqCBActionPerformed(evt);
            }
        });

        Expt_numSpecsAdjCB.setText("Expt_numSpecsAdj");
        Expt_numSpecsAdjCB.setEnabled(false);
        Expt_numSpecsAdjCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expt_numSpecsAdjCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Expt_numSpecsAdjCB)
                    .addComponent(Expt_numSpecsUniqCB)
                    .addComponent(Expt_numSpecsTotCB)
                    .addComponent(Expt_numPepsUniqCB)
                    .addComponent(Expt_numPepsTotCB)
                    .addComponent(Expt_PwCB)
                    .addComponent(Expt_IDCB)
                    .addComponent(ALL_numSpecsUniqCB))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ALL_numSpecsUniqCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_IDCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_PwCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_numPepsTotCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_numPepsUniqCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_numSpecsTotCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_numSpecsUniqCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Expt_numSpecsAdjCB)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4_customOutputLayout = new javax.swing.GroupLayout(jPanel4_customOutput);
        jPanel4_customOutput.setLayout(jPanel4_customOutputLayout);
        jPanel4_customOutputLayout.setHorizontalGroup(
            jPanel4_customOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4_customOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4_customOutputLayout.setVerticalGroup(
            jPanel4_customOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4_customOutputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4_customOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Output Type"));
        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        outputRBgroup.add(defaultOutputRB);
        defaultOutputRB.setSelected(true);
        defaultOutputRB.setText("Default   ");
        defaultOutputRB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        defaultOutputRB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        defaultOutputRB.setPreferredSize(new java.awt.Dimension(80, 22));
        defaultOutputRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultOutputRBActionPerformed(evt);
            }
        });
        jPanel9.add(defaultOutputRB);

        outputRBgroup.add(geneRB);
        geneRB.setText("Gene   ");
        geneRB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        geneRB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        geneRB.setPreferredSize(new java.awt.Dimension(80, 22));
        geneRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneRBActionPerformed(evt);
            }
        });
        jPanel9.add(geneRB);

        outputRBgroup.add(peptideOutputRB);
        peptideOutputRB.setText("Peptide   ");
        peptideOutputRB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        peptideOutputRB.setPreferredSize(new java.awt.Dimension(80, 22));
        peptideOutputRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptideOutputRBActionPerformed(evt);
            }
        });
        jPanel9.add(peptideOutputRB);

        outputRBgroup.add(qspecRB_prot);
        qspecRB_prot.setText("QSpec Prot   ");
        qspecRB_prot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        qspecRB_prot.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        qspecRB_prot.setPreferredSize(new java.awt.Dimension(80, 22));
        qspecRB_prot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qspecRB_protActionPerformed(evt);
            }
        });
        jPanel9.add(qspecRB_prot);

        outputRBgroup.add(qspecRB_gene);
        qspecRB_gene.setText("QSpec Gene   ");
        qspecRB_gene.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        qspecRB_gene.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        qspecRB_gene.setPreferredSize(new java.awt.Dimension(80, 22));
        qspecRB_gene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qspecRB_geneActionPerformed(evt);
            }
        });
        jPanel9.add(qspecRB_gene);

        outputRBgroup.add(customRB);
        customRB.setText("Custom");
        customRB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        customRB.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        customRB.setPreferredSize(new java.awt.Dimension(80, 22));
        customRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customRBActionPerformed(evt);
            }
        });
        jPanel9.add(customRB);

        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });
        jPanel8.add(RunButton);

        SaveParamsButton.setText("Save");
        SaveParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveParamsButtonActionPerformed(evt);
            }
        });
        jPanel8.add(SaveParamsButton);

        clearFormButton.setText("Clear");
        clearFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormButtonActionPerformed(evt);
            }
        });
        jPanel8.add(clearFormButton);

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });
        jPanel8.add(ExitButton);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Additional Options"));
        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        keepDBCB.setText("Keep DB");
        keepDBCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        keepDBCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keepDBCBActionPerformed(evt);
            }
        });
        jPanel7.add(keepDBCB);

        nsafCB.setText("NSAF");
        nsafCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nsafCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsafCBActionPerformed(evt);
            }
        });
        jPanel7.add(nsafCB);

        verboseResultsCB.setText("Verbose Results");
        verboseResultsCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel7.add(verboseResultsCB);

        recalcPepWtCB.setText("Recalc Pep Wts");
        recalcPepWtCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalcPepWtCBActionPerformed(evt);
            }
        });
        jPanel7.add(recalcPepWtCB);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Load Parameter File"));

        jLabel13.setText("Parameter File:");

        paramFileBrowseButton.setText("Load File");
        paramFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paramFileBrowseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramFileTextField)
                .addGap(18, 18, 18)
                .addComponent(paramFileBrowseButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(paramFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paramFileBrowseButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4_customOutput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4_customOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitButtonActionPerformed


	// function clears out all global variables
	private void clearGlobalVariables() {
		Globals.DBname = null;
		Globals.paramFile = null;
		Globals.gene2protFile = null;
		Globals.outputFilePath = null;
		Globals.outputPath = null;
		Globals.combinedFile = null;
		Globals.combinedFilePath = null;
		Globals.pepRegexText = null;
		Globals.pepMods_minus = null;
		Globals.pepMods_minus = null;
		Globals.fastaFile = null;

		Globals.iniProbTH = -1;
		Globals.maxIniProbTH = -1;
		Globals.minCombinedFilePw = -1;
		Globals.minPw = -1;
		Globals.epiThreshold = -1;
		Globals.recalcPepWts = false;

		if(Globals.protLen != null) Globals.protLen.clear();
		if(Globals.pepTagHash != null) Globals.pepTagHash.clear();
		if(Globals.protTagHash != null) Globals.protTagHash.clear();
		if(Globals.pepXmlFiles != null) Globals.pepXmlFiles.clear();
		if(Globals.protXmlFiles != null) Globals.protXmlFiles.clear();
		if(Globals.printC != null) Globals.printC.clear();
		if(Globals.printE != null) Globals.printE.clear();
	}


    private void clearFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormButtonActionPerformed
        dbNameTextField.setText("ABACUSDB");
        decoyTagTextField.setText("rev_");
        maxIniProbTextField.setText("0.99");
        minCombinedFilePwTextField.setText("0.90");
        iniProbTextField.setText("0.50");
		epiTextField.setText("0");
        srcDirTextField.setText("");
		outputFileTextField.setText( "ABACUS_output.tsv" );
		paramFileTextField.setText("");
		fastaTextField.setText("");
		combinedFileTextField.setText("");
		gene2protTextField.setText("");
		pepRegexTextField.setText("");
		
		// uncheck this box
		if(this.recalcPepWtCB.isSelected()) this.recalcPepWtCB.doClick();
		if(this.nsafCB.isSelected()) this.nsafCB.doClick();

		clearCustomOptions();
		defaultOutputRB.doClick();

		clearGlobalVariables();

    }//GEN-LAST:event_clearFormButtonActionPerformed

    private void srcDirBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcDirBrowseButtonActionPerformed
        // This code opens a fileChooser object allowing the user to select the
        // folder that contains the pepXML and protXML files
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory
		fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		
		
        // in response to a button click:
        int retVal = fc.showOpenDialog(AbacusUI.this);

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            Globals.srcDir = f.getPath();
            srcDirTextField.setText(Globals.srcDir);
        }
    }//GEN-LAST:event_srcDirBrowseButtonActionPerformed

    private void fastaBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaBrowseButtonActionPerformed
        //This code opens a fileChooser object allowing user to select the
        // FASTA file for this analysis
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // in response to a button click:
        int retVal = fc.showOpenDialog(AbacusUI.this);

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            Globals.fastaFile = f.getPath();
            fastaTextField.setText(Globals.fastaFile);
        }
    }//GEN-LAST:event_fastaBrowseButtonActionPerformed

    private void gene2protBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gene2protBrowseButtonActionPerformed
        // This code opens a fileChooser object allowing user to select the
        // file mapping genes to proteins (this is an optional field).
		
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // in response to a button click:
        int retVal = fc.showOpenDialog(AbacusUI.this);

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            Globals.gene2protFile = f.getPath();
            gene2protTextField.setText(Globals.gene2protFile);
        }
    }//GEN-LAST:event_gene2protBrowseButtonActionPerformed

    private void combinedFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinedFileBrowseButtonActionPerformed
        // This code asks the user to select the merged or COMBINED file
        // for this run
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // in response to a button click:
        int retVal = fc.showOpenDialog(AbacusUI.this);

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            Globals.combinedFile = f.getPath();
            combinedFileTextField.setText(Globals.combinedFile);
        }
    }//GEN-LAST:event_combinedFileBrowseButtonActionPerformed

    private void paramFileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paramFileBrowseButtonActionPerformed
        // This function allows the user to load preset options from a parameter file
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory

        // in response to a button click:
        int retVal = fc.showOpenDialog(AbacusUI.this);

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            Globals.paramFile = f.getPath();
            paramFileTextField.setText(Globals.paramFile);

            // parse the given file
            Globals.parseParametersFile();

            // update the form with the data from the file
            dbNameTextField.setText(Globals.DBname);

			if(!Globals.fastaFile.isEmpty()) {
				fastaTextField.setText(Globals.fastaFile);
			}
			
			if(Globals.byPeptide) {
				this.peptideOutputRB.doClick();
			}
			
            if(Globals.keepDB) {
                keepDBCB.doClick();
            }

			if(Globals.doNSAF) {
				nsafCB.doClick();
			}

			if(Globals.recalcPepWts) {
				recalcPepWtCB.doClick();
			}
			
			if(Globals.decoyTag != null) {
                decoyTagTextField.setText(Globals.decoyTag);
            }
            else {
                decoyTagTextField.setText("");
            }

			if(Globals.makeVerboseOutput == true) verboseResultsCB.doClick();

			if(Globals.pepRegexText != null) {
				pepRegexTextField.setText(Globals.pepRegexText);
			}


            maxIniProbTextField.setText(Double.toString(Globals.maxIniProbTH));
            minCombinedFilePwTextField.setText(Double.toString(Globals.minCombinedFilePw));
            ///minPwTextField.setText(Double.toString(globals.minPw));
            iniProbTextField.setText(Double.toString(Globals.iniProbTH));
            //pepXMLsuffixTextField.setText(globals.pepXMLsuffix);
            //protXMLsuffixTextField.setText(globals.protXMLsuffix);
            //fastaTextField.setText(globals.fastaFile);
            combinedFileTextField.setText(Globals.combinedFilePath);
			epiTextField.setText(Double.toString(Globals.epiThreshold));

            if(Globals.srcDir.equals(".")) {
                File cd = new File(Globals.paramFile);
                String cd_path = cd.getAbsolutePath();
                srcDirTextField.setText(cd_path);
                Globals.srcDir = cd_path;
            }
            else { srcDirTextField.setText(Globals.srcDir); }

            if(Globals.gene2protFile != null) {
                gene2protTextField.setText(Globals.gene2protFile);
            }
            else {
                gene2protTextField.setText("");
            }

            // need to select Custom Radio button and load the specified options
            if(Globals.outputFormat == Globals.customOutput) {
                customRB.doClick();
                jPanel4_customOutput.setEnabled(rootPaneCheckingEnabled);

                //printC options
                if(Globals.printC.contains("ALL_ID")) ALL_IDCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_PW")) ALL_PwCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_LOCALPW")) ALL_localPwCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_NUMPEPSTOT")) ALL_numPepsTotCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_NUMPEPSUNIQ")) ALL_numPepsUniqCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_NUMSPECSTOT")) ALL_numSpecsTotCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ALL_NUMSPECSUNIQ")) ALL_numSpecsUniqCB.setSelected(rootPaneCheckingEnabled);

                if(Globals.printC.contains("MAXPW")) maxPwCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("MAXINIPROB")) maxIniProbCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("WT_MAXINIPROB")) wt_maxIniProbCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("MAXINIPROBUNIQ")) maxIniProbUniqCB.setSelected(rootPaneCheckingEnabled);

                if(Globals.printC.contains("PROTID")) protidCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("ISFWD")) isFwdCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("DEFLINE")) deflineCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("NUMXML")) numXMLCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("PROTLEN")) protLenCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printC.contains("GENEID")) geneidCB.setSelected(rootPaneCheckingEnabled);

                //printE options
                if(Globals.printE.contains("_id")) Expt_IDCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_Pw")) Expt_PwCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_numPepsTot")) Expt_numPepsTotCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_numPepsUniq")) Expt_numPepsUniqCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_numSpecsTot")) Expt_numSpecsTotCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_numSpecsUniq")) Expt_numSpecsUniqCB.setSelected(rootPaneCheckingEnabled);
                if(Globals.printE.contains("_numSpecsAdj")) Expt_numSpecsAdjCB.setSelected(rootPaneCheckingEnabled);
            }
			else if(Globals.outputFormat == Globals.geneOutput) {
				geneRB.doClick();
			}
			else if(Globals.outputFormat == Globals.geneQspecFormat) {
				qspecRB_gene.doClick();
			}
			else if(Globals.outputFormat == Globals.protQspecFormat) {
				qspecRB_prot.doClick();
			}
			else if(Globals.outputFormat == Globals.defaultOutput) {
				defaultOutputRB.doClick();
			}

			// this has to be set last otherwise output 'doClick()' options will overwrite it
			outputFileTextField.setText(Globals.outputFilePath);

			//capture the path of the outputFile and use it to prepend all output options
			f = new File(Globals.outputFilePath);
			Globals.outputPath = f.getParent() + System.getProperty("file.separator");
			f = null;

        }
    }//GEN-LAST:event_paramFileBrowseButtonActionPerformed



    private void SaveParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveParamsButtonActionPerformed
        // This function saves the options specified in the gui to a parameter file
		fc.setCurrentDirectory(new File(".")); // sets the file chooser to the current working directory
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setMultiSelectionEnabled(false);

		// check to see if the parameter file field already has a value
		// If it does, use this value as the initial file name to save under.
		if( !paramFileTextField.getText().trim().isEmpty() ) {
			File f = new File( paramFileTextField.getText().trim() );
			fc.setCurrentDirectory(new File(f.getParent()) );
			fc.setSelectedFile(new File(f.getName()));
		}
		else { // the parameter file text field is empty, use this default
			fc.setCurrentDirectory(new File("."));
			fc.setSelectedFile(new File("Abacus_parameters.txt"));
		}

		if( errorChecking() ) { // do error checking first

			// in response to a button click:
			int retVal = fc.showSaveDialog(AbacusUI.this);
			boolean success = false;
			String localFileName = null;

			if(retVal == JFileChooser.APPROVE_OPTION) {
				File f = fc.getSelectedFile();
				String outFile = f.getAbsolutePath();
				localFileName = f.getName();

				// this prevent overwriting of files
				if(f.exists()) {
					String txt = "The file '" + localFileName + "' exists.\nOverwrite it?";

					int response = JOptionPane.showConfirmDialog(
						null,
						txt,
						"Confirm Overwrite",
						JOptionPane.OK_CANCEL_OPTION,
						JOptionPane.QUESTION_MESSAGE
					);

					if(response == JOptionPane.CANCEL_OPTION) return; // cancel save
				}


				// If you got this far you will now write to disk
				try {
					BufferedWriter out = new BufferedWriter(new FileWriter(outFile));

					out.append("\n#\n# ABACUS parameter file\n" + "# Generated on: ")
                            .append(Globals.formatCurrentTime())
                            .append("\n#\n\n");

					out.append("# Name to give the database\n" + "dbName=")
                            .append(dbNameTextField.getText())
                            .append("\n\n")
                            .append("# Name of protXML file corresponding to merged/combined results\n")
                            .append("combinedFile=")
                            .append(combinedFileTextField.getText())
                            .append("\n\n")
                            .append("# The directory that contains the pepXML and protXML files\n")
                            .append("srcDir=").append(srcDirTextField.getText())
                            .append("\n\n")
                            .append("# The name of the file where results will be saved to\n")
                            .append("outputFile=")
                            .append(outputFileTextField.getText().trim())
                            .append("\n\n")
                            .append("# The minimum PeptideProphet score the best peptide match of a protein must have\n")
                            .append("maxIniProbTH=")
                            .append(maxIniProbTextField.getText())
                            .append("\n\n")
                            .append("# The minimum PeptideProphet score a peptide must have in order to be even considered by Abacus\n")
                            .append("iniProbTH=")
                            .append(iniProbTextField.getText())
                            .append("\n\n")
                            .append("# E.P.I: Experimental Peptide-probability Inclusion threshold\n")
                            .append("# If a protein does not contain at least one peptide exceeding this PeptideProphet score, none of the\n")
                            .append("# peptide evidence for this protein will be considered. This is applied on an experiment by experiment case.\n")
                            .append("epiTH=")
                            .append(epiTextField.getText())
                            .append("\n\n")
                            .append("# The minimum ProteinProphet score a protein group must have in the COMBINED file\n")
                            .append("minCombinedFilePw=")
                            .append(minCombinedFilePwTextField.getText())
                            .append("\n\n")
                            .append("# The path the the FASTA formatted file used for the original protein search\n")
                            .append("# Relative paths are allowed\n")
                            .append("fasta=")
                            .append(fastaTextField.getText())
                            .append("\n\n");
					
					
					if( !pepRegexTextField.getText().isEmpty() ) {

						String modTxt = null;
						modTxt = pepRegexTextField.getText().trim().replaceAll("\\s", "").toUpperCase();			
						out.append("# Amino Acid modifications that all peptides are required to have in order to be counted\n" + "# by Abacus.\n" + "reqAAmods=")
                                .append(modTxt).append("\n\n");
					}


					out.append(
						"# If true, Abacus will write ALL protein IDs belonging to a group in the COMBINED file\n" +
						"# Protein IDs starting with ':::' are additional identifiers from the same protein group in\n" +
						"# the COMBINED file. The representative protein for the group does not start with ':::'\n"
					);
					if( verboseResultsCB.isSelected() ) out.append("verboseResults=true\n\n");
					else out.append("verboseResults=false\n\n");


					// determine if the HyperSQL database should be retained
					if(keepDBCB.isSelected()) {
						out.append(
								"# The keep the HyperSQL database files that are created after the program is done\n" +
								"keepDB=true\n\n"
						);
					}
					else {
						out.append(
								"# The keep the HyperSQL database files that are created after the program is done\n" +
								"keepDB=false\n\n"
						);
					}
					
					// determine if peptide weights need to be recalculated
					out.append(
						"# Should the peptide weights be recalculated in the individual experiment XML files.\n" +
						"# Useful for peptides that are highly degenerate within a single protein groups\n" +
						"recalcPepWts="
					);
					
					if(recalcPepWtCB.isSelected()) out.append("true\n\n");
					else out.append("false\n\n");

					
					// determine if the spectral count output should be NSAF format
					out.append(
							"# Spectral count data will be reported in NSAF format.\n" +
							"# NSAF = _N_ormalized _S_pectral _A_bundance _F_actor\n" +
							"# For a detailed explanation of this method refer to this pubmed link:\n" +
							"# http://www.ncbi.nlm.nih.gov/pubmed/20166708\n" +
							"# Abacus reports NSAF values multiplied by a scaling factor. This is done to\n" +
							"# control for numeric underflow (ie: really small numbers). The scaling factor\n" +
							"# that is used is called the NSAF_FACTOR and is reported during runtime in\n" +
							"# case you would like to rescale your data.\n"
					);
					if(nsafCB.isSelected()) {
						out.append("asNSAF=true\n\n");
					}
					else {
						out.append("asNSAF=false\n\n");
					 }
					
					
					if(Globals.gene2protFile != null) {
						out.append("# The path the file that maps between protein IDs and gene IDs\n" + "# File format: geneId protId description. All lines must be tab separated.\n" + "# Comment lines (like the column header) start with '#'.\n" + "gene2prot=").append(gene2protTextField.getText()).append("\n\n");
					}

					String decoyTag = decoyTagTextField.getText();
					if( (decoyTag != null) && ((decoyTag.length() < 10) && (decoyTag.length() > 0)) ) {
						out.append("# If you are using decoy proteins in your searches, specify the first few\n" + "# characters of the label indicating decoy proteins here\n" + "decoyTag=").append(decoyTag).append("\n\n");
					}

					// this section sets the output format to be generated by this parameter file
					if( qspecRB_prot.isSelected() ) {
						out.append(
							 "# Output format that will be produced by this parameter file\n" +
							 "output=ProtQspec\n\n"
						);
					}
					if( qspecRB_gene.isSelected() ) {
						out.append(
							 "# Output format that will be produced by this parameter file\n" +
							 "output=GeneQspec\n\n"
						);
					}
					if( geneRB.isSelected() && (Globals.gene2protFile != null) ) {
						out.append(
							 "# Output format that will be produced by this parameter file\n" +
							 "output=Gene\n\n"
						);
					}
					if( customRB.isSelected() ) {
						out.append(
							 "# Output format that will be produced by this parameter file\n" +
							 "output=Custom\n"
						);
						out.append( getCustomOutputFormat() );
						out.append("\n");
					}
					if( defaultOutputRB.isSelected() ) {
						out.append(
							 "# Output format that will be produced by this parameter file\n" +
							 "output=Default\n\n"
						);
					}
					if( this.peptideOutputRB.isSelected() ) {
						out.append(
								"# Output format that will be produced by this parameter file\n" +
								"output=Peptide\n\n"
						);
					}

					out.close();
					success = true;
				} catch (IOException ex) {
					Logger.getLogger(AbacusUI.class.getName()).log(Level.SEVERE, null, ex);
				}

				if(success) {
					String msg = "Your parameters have been saved to " + localFileName;
					JOptionPane.showMessageDialog(AbacusUI.this, msg);
				}
			}
		} // end errorChecking()
    }//GEN-LAST:event_SaveParamsButtonActionPerformed

    // Function returns a string that contains the user's selected custom output options.
    private String getCustomOutputFormat() {
        String printCstr = "printC=";
        String printEstr = "printE=";
        String ret = "";

        // printC options
        if(protidCB.isSelected()) printCstr += "protid,";
        if(geneidCB.isSelected()) printCstr += "geneid,";
        if(isFwdCB.isSelected()) printCstr += "isFwd,";
        if(protLenCB.isSelected()) printCstr += "protLen,";
        if(numXMLCB.isSelected()) printCstr += "numXML,";
        if(maxPwCB.isSelected()) printCstr += "maxPw,";
        if(maxIniProbCB.isSelected()) printCstr += "maxIniProb,";
        if(wt_maxIniProbCB.isSelected()) printCstr += "wt_maxIniProb,";
        if(maxIniProbUniqCB.isSelected()) printCstr += "maxIniProbUniq,";
        if(deflineCB.isSelected()) printCstr += "defline,";

        if(ALL_IDCB.isSelected()) printCstr += "id,";
        if(ALL_PwCB.isSelected()) printCstr += "allPw,";
        if(ALL_localPwCB.isSelected()) printCstr += "localPw,";
        if(ALL_numPepsTotCB.isSelected()) printCstr += "numPepsTot,";
        if(ALL_numPepsUniqCB.isSelected()) printCstr += "numPepsUniq,";
        if(ALL_numSpecsTotCB.isSelected()) printCstr += "numSpecsTot,";
        if(ALL_numSpecsUniqCB.isSelected()) printCstr += "numSpecsUniq,";

        // trim off trailing comma
        int n = printCstr.length() - 1;
        ret += printCstr.substring(0, n) + "\n";

        // printE options
        if(Expt_IDCB.isSelected()) printEstr += "id,";
        if(Expt_PwCB.isSelected()) printEstr += "Pw,";
        if(Expt_numPepsTotCB.isSelected()) printEstr += "numPepsTot,";
        if(Expt_numPepsUniqCB.isSelected()) printEstr += "numPepsUniq,";
        if(Expt_numSpecsTotCB.isSelected()) printEstr += "numSpecsTot,";
        if(Expt_numSpecsUniqCB.isSelected()) printEstr += "numSpecsUniq,";
        if(Expt_numSpecsAdjCB.isSelected()) printEstr += "numSpecsAdj,";

        n = printEstr.length() - 1;
        ret += printEstr.substring(0,n) + "\n";

        return ret;
    }

    /*
     * This block of code adds the custom output format options to the global.printE/C sets
     */
    private void keepDBCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keepDBCBActionPerformed
        Globals.keepDB = true;
    }//GEN-LAST:event_keepDBCBActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        // When the 'Run' button is clicked, stuff starts to happen

		if( errorChecking() ) { // check user input before continuing

			// read the input from the gui and use it to assign values to the 'globals' variables
			this.initializeGlobalVariablesFromGUI();

			RunButton.setEnabled(false); // can't run again until it's over

			t = new WorkerThread();
			t.start();
		}

		RunButton.setEnabled(true);
    }//GEN-LAST:event_RunButtonActionPerformed



	/*******
	 * This function reads in all the data put into the GUI and initializes the
	 * variables in the globals class with their values.
	 */
	private void initializeGlobalVariablesFromGUI() {
		// Set a value for the globals.decoyTag variable based upon input
		// on the main menu. If the field is blank, we will assume the user
		// is not using any decoy's.
		if( this.decoyTagTextField.getText().trim().equals("") )
			Globals.decoyTag = UUID.randomUUID().toString().replace('-','x');
		else Globals.decoyTag = this.decoyTagTextField.getText().trim();


		if(this.gene2protTextField.getText().trim().isEmpty()) {
			Globals.byGene = false;
			Globals.gene2protFile = null;
		}


		// set the combinedFile field in globals
		File f = new File(this.combinedFileTextField.getText().trim());
		if(f.exists()) {
			Globals.combinedFile = f.getName();
		}
		f = null;

		Globals.DBname = dbNameTextField.getText().trim();
		Globals.outputFilePath = this.outputFileTextField.getText().trim();

		if(this.nsafCB.isSelected()) Globals.doNSAF = true;
		else Globals.doNSAF = false;

		if(this.recalcPepWtCB.isSelected()) Globals.recalcPepWts = true;
		else Globals.recalcPepWts = false;

		// user provided a peptide regex to filter on
		if( !this.pepRegexTextField.getText().trim().isEmpty() ) {
			Globals.pepRegexText = this.pepRegexTextField.getText().trim().toUpperCase();
			Globals.formatPepRegex();
		}

		if( this.verboseResultsCB.isSelected() ) Globals.makeVerboseOutput = true;
		else Globals.makeVerboseOutput = false;

		if(this.qspecRB_gene.isSelected()) {
			Globals.outputFormat = Globals.geneQspecFormat;
			Globals.byGene = true;
		}
		else if(this.qspecRB_prot.isSelected()) {
			Globals.outputFormat = Globals.protQspecFormat;
			Globals.byGene = false;
		}
		else if(this.geneRB.isSelected()) Globals.byGene = true;
		else if(this.customRB.isSelected()) {
			Globals.outputFormat = Globals.customOutput;
			Globals.byGene = false;
		}
		else if(this.defaultOutputRB.isSelected()) {
			Globals.outputFormat = Globals.defaultOutput;
			Globals.byGene = false;
		}
		else if(this.peptideOutputRB.isSelected()) {
			Globals.outputFormat = Globals.peptideOutput;
			Globals.byPeptide = true;
		}


		// if the user has elected to produce a custom output, verify all the fields
		// are correctly selected
		if( this.customRB.isSelected() ) {

			// clear these hashes for work
			Globals.printC.clear();
			Globals.printE.clear();

			// check on combined file variables
			if(this.protidCB.isSelected()) Globals.printC.add("PROTID");
			if(this.protLenCB.isSelected()) Globals.printC.add("PROTLEN");
			if(this.isFwdCB.isSelected()) Globals.printC.add("ISFWD");
			if(this.deflineCB.isSelected()) Globals.printC.add("DEFLINE");
			if(this.numXMLCB.isSelected()) Globals.printC.add("NUMXML");
			if(this.maxPwCB.isSelected()) Globals.printC.add("MAXPW");
			if(this.maxIniProbCB.isSelected()) Globals.printC.add("MAXINIPROB");
			if(this.wt_maxIniProbCB.isSelected()) Globals.printC.add("WT_MAXINIPROB");
			if(this.maxIniProbUniqCB.isSelected()) Globals.printC.add("MAXINIPROBUNIQ");

			if(this.ALL_IDCB.isSelected()) Globals.printC.add("ALL_ID");
			if(this.ALL_PwCB.isSelected()) Globals.printC.add("ALL_PW");
			if(this.ALL_localPwCB.isSelected()) Globals.printC.add("ALL_LOCALPW");
			if(this.ALL_numPepsTotCB.isSelected()) Globals.printC.add("ALL_NUMPEPSTOT");
			if(this.ALL_numPepsUniqCB.isSelected()) Globals.printC.add("ALL_NUMPEPSUNIQ");
			if(this.ALL_numSpecsTotCB.isSelected()) Globals.printC.add("ALL_NUMSPECSTOT");
			if(this.ALL_numSpecsUniqCB.isSelected()) Globals.printC.add("ALL_NUMSPECSUNIQ");

			if( (Globals.gene2protFile != null) && (this.geneidCB.isSelected()) ) {
				Globals.printC.add("GENEID");
			}

			// check on individual file variables
			if(this.Expt_IDCB.isSelected()) Globals.printE.add("_id");
			if(this.Expt_PwCB.isSelected()) Globals.printE.add("_Pw");
			if(this.Expt_numPepsTotCB.isSelected()) Globals.printE.add("_numPepsTot");
			if(this.Expt_numPepsUniqCB.isSelected()) Globals.printE.add("_numPepsUniq");
			if(this.Expt_numSpecsTotCB.isSelected()) Globals.printE.add("_numSpecsTot");
			if(this.Expt_numSpecsUniqCB.isSelected()) Globals.printE.add("_numSpecsUniq");
			if(this.Expt_numSpecsAdjCB.isSelected()) Globals.printE.add("_numSpecsAdj");

			if(this.nsafCB.isSelected()) {
				if(this.Expt_numSpecsTotCB.isSelected()) Globals.printE.add("_totNSAF");
				if(this.Expt_numSpecsUniqCB.isSelected()) Globals.printE.add("_uniqNSAF");
				if(this.Expt_numSpecsAdjCB.isSelected()) Globals.printE.add("_adjNSAF");
			}
		}


		Globals.srcDir = this.srcDirTextField.getText().trim();
		Globals.maxIniProbTH = Double.parseDouble( this.maxIniProbTextField.getText().trim() );
		Globals.fastaFile = this.fastaTextField.getText().trim();
		Globals.minCombinedFilePw = Double.parseDouble( this.minCombinedFilePwTextField.getText().trim() );
//		globals.minPw = Double.parseDouble( this.minPwTextField.getText().trim() );
		Globals.iniProbTH = Double.parseDouble( this.iniProbTextField.getText().trim() );
//		globals.pepXMLsuffix = this.pepXMLsuffixTextField.getText().trim();
//		globals.protXMLsuffix = this.protXMLsuffixTextField.getText().trim();

		if(this.recalcPepWtCB.isSelected()) Globals.recalcPepWts = true;
		else Globals.recalcPepWts = false;
		
		if(this.keepDBCB.isSelected()) Globals.keepDB = true;
		else Globals.keepDB = false;

		if( !this.epiTextField.getText().trim().isEmpty() ) {
			Globals.epiThreshold = Double.parseDouble(this.epiTextField.getText().trim());
		}
		else Globals.epiThreshold = 0;

		Globals.protTagHash = null;
		Globals.pepTagHash = null;
		Globals.protTagHash = new HashMap<>();
		Globals.pepTagHash = new HashMap<>();
	}



	private void outputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileButtonActionPerformed
		fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fc.setCurrentDirectory(new File("."));
		fc.setMultiSelectionEnabled(false);
		fc.setSelectedFile(new File("Abacus_output.tsv"));

        // in response to a button click:
        int retVal = fc.showSaveDialog(AbacusUI.this);
        String localFileName = null;

        if(retVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            String outFile = f.getAbsolutePath();
            localFileName = f.getName();

			// this prevent overwriting of files
			if(f.exists()) {
				String txt = "The file '" + localFileName + "' exists.\nOverwrite it?";

				int response = JOptionPane.showConfirmDialog(
					null,
					txt,
					"Confirm Overwrite",
					JOptionPane.OK_CANCEL_OPTION,
					JOptionPane.QUESTION_MESSAGE
				);

				if(response == JOptionPane.CANCEL_OPTION) return; // cancel save
				else {
					this.outputFileTextField.setText(f.getAbsolutePath());
				}
			}
			else {
				try {
					this.outputFileTextField.setText(f.getCanonicalFile().toString());
				} catch (IOException ex) {
					Logger.getLogger(AbacusUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}
	}//GEN-LAST:event_outputFileButtonActionPerformed

	private void nsafCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsafCBActionPerformed
		Globals.doNSAF = true;
	}//GEN-LAST:event_nsafCBActionPerformed

	private void customRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customRBActionPerformed
		// This enables the custom output panel and sets the output type
		// to be custom
		Globals.outputFormat = Globals.customOutput;

		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");
		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_custom.tsv");

		// Make the custom output menu visible
		protidCB.setEnabled(true);
		isFwdCB.setEnabled(true);
		deflineCB.setEnabled(true);
		geneidCB.setEnabled(true);

		maxIniProbCB.setEnabled(true);
		wt_maxIniProbCB.setEnabled(true);
		maxIniProbUniqCB.setEnabled(true);
		maxPwCB.setEnabled(true);
		numXMLCB.setEnabled(true);
		protLenCB.setEnabled(true);

		ALL_IDCB.setEnabled(true);
		ALL_PwCB.setEnabled(true);
		ALL_localPwCB.setEnabled(true);
		ALL_numPepsTotCB.setEnabled(true);
		ALL_numPepsUniqCB.setEnabled(true);
		ALL_numSpecsTotCB.setEnabled(true);
		ALL_numSpecsUniqCB.setEnabled(true);

		Expt_IDCB.setEnabled(true);
		Expt_PwCB.setEnabled(true);
		Expt_numPepsTotCB.setEnabled(true);
		Expt_numPepsUniqCB.setEnabled(true);
		Expt_numSpecsTotCB.setEnabled(true);
		Expt_numSpecsUniqCB.setEnabled(true);
		Expt_numSpecsAdjCB.setEnabled(true);
	}//GEN-LAST:event_customRBActionPerformed

	private void geneRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneRBActionPerformed
		// sets the byGene output to be true
		Globals.byGene = true;

		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");
		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_gene.tsv");

		// Make the custom output menu invisible
		protidCB.setEnabled(false);
		isFwdCB.setEnabled(false);
		deflineCB.setEnabled(false);
		geneidCB.setEnabled(false);

		maxIniProbCB.setEnabled(false);
		wt_maxIniProbCB.setEnabled(false);
		maxIniProbUniqCB.setEnabled(false);
		maxPwCB.setEnabled(false);
		numXMLCB.setEnabled(false);
		protLenCB.setEnabled(false);

		ALL_IDCB.setEnabled(false);
		ALL_PwCB.setEnabled(false);
		ALL_localPwCB.setEnabled(false);
		ALL_numPepsTotCB.setEnabled(false);
		ALL_numPepsUniqCB.setEnabled(false);
		ALL_numSpecsTotCB.setEnabled(false);
		ALL_numSpecsUniqCB.setEnabled(false);

		Expt_IDCB.setEnabled(false);
		Expt_PwCB.setEnabled(false);
		Expt_numPepsTotCB.setEnabled(false);
		Expt_numPepsUniqCB.setEnabled(false);
		Expt_numSpecsTotCB.setEnabled(false);
		Expt_numSpecsUniqCB.setEnabled(false);
		Expt_numSpecsAdjCB.setEnabled(false);
}//GEN-LAST:event_geneRBActionPerformed

	private void qspecRB_protActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qspecRB_protActionPerformed
		// sets the output to be 'protein qspec'
		Globals.outputFormat = Globals.protQspecFormat;

		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");
		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_forQspec.tsv");

		// Make the custom output menu invisible
		protidCB.setEnabled(false);
		isFwdCB.setEnabled(false);
		deflineCB.setEnabled(false);
		geneidCB.setEnabled(false);

		maxIniProbCB.setEnabled(false);
		wt_maxIniProbCB.setEnabled(false);
		maxIniProbUniqCB.setEnabled(false);
		maxPwCB.setEnabled(false);
		numXMLCB.setEnabled(false);
		protLenCB.setEnabled(false);

		ALL_IDCB.setEnabled(false);
		ALL_PwCB.setEnabled(false);
		ALL_localPwCB.setEnabled(false);
		ALL_numPepsTotCB.setEnabled(false);
		ALL_numPepsUniqCB.setEnabled(false);
		ALL_numSpecsTotCB.setEnabled(false);
		ALL_numSpecsUniqCB.setEnabled(false);

		Expt_IDCB.setEnabled(false);
		Expt_PwCB.setEnabled(false);
		Expt_numPepsTotCB.setEnabled(false);
		Expt_numPepsUniqCB.setEnabled(false);
		Expt_numSpecsTotCB.setEnabled(false);
		Expt_numSpecsUniqCB.setEnabled(false);
		Expt_numSpecsAdjCB.setEnabled(false);
}//GEN-LAST:event_qspecRB_protActionPerformed

	private void defaultOutputRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultOutputRBActionPerformed
		// sets the output to be 'default'
		Globals.outputFormat = 0;

		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");

		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_output.tsv");

		// Make the custom output menu invisible
		protidCB.setEnabled(false);
		isFwdCB.setEnabled(false);
		deflineCB.setEnabled(false);
		geneidCB.setEnabled(false);

		maxIniProbCB.setEnabled(false);
		wt_maxIniProbCB.setEnabled(false);
		maxIniProbUniqCB.setEnabled(false);
		maxPwCB.setEnabled(false);
		numXMLCB.setEnabled(false);
		protLenCB.setEnabled(false);

		ALL_IDCB.setEnabled(false);
		ALL_PwCB.setEnabled(false);
		ALL_localPwCB.setEnabled(false);
		ALL_numPepsTotCB.setEnabled(false);
		ALL_numPepsUniqCB.setEnabled(false);
		ALL_numSpecsTotCB.setEnabled(false);
		ALL_numSpecsUniqCB.setEnabled(false);

		Expt_IDCB.setEnabled(false);
		Expt_PwCB.setEnabled(false);
		Expt_numPepsTotCB.setEnabled(false);
		Expt_numPepsUniqCB.setEnabled(false);
		Expt_numSpecsTotCB.setEnabled(false);
		Expt_numSpecsUniqCB.setEnabled(false);
		Expt_numSpecsAdjCB.setEnabled(false);
}//GEN-LAST:event_defaultOutputRBActionPerformed

	private void Expt_numSpecsAdjCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_numSpecsAdjCBActionPerformed
		Globals.printE.add("numSpecsAdj");
}//GEN-LAST:event_Expt_numSpecsAdjCBActionPerformed

	private void Expt_numSpecsUniqCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_numSpecsUniqCBActionPerformed
		Globals.printE.add("numSpecsUniq");
}//GEN-LAST:event_Expt_numSpecsUniqCBActionPerformed

	private void Expt_numSpecsTotCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_numSpecsTotCBActionPerformed
		Globals.printE.add("numSpecsTot");
}//GEN-LAST:event_Expt_numSpecsTotCBActionPerformed

	private void Expt_numPepsUniqCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_numPepsUniqCBActionPerformed
		Globals.printE.add("numPepsUniq");
}//GEN-LAST:event_Expt_numPepsUniqCBActionPerformed

	private void Expt_numPepsTotCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_numPepsTotCBActionPerformed
		Globals.printE.add("numPepsTot");
}//GEN-LAST:event_Expt_numPepsTotCBActionPerformed

	private void Expt_PwCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_PwCBActionPerformed
		Globals.printE.add("Pw");
}//GEN-LAST:event_Expt_PwCBActionPerformed

	private void Expt_IDCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expt_IDCBActionPerformed
		Globals.printE.add("id");
}//GEN-LAST:event_Expt_IDCBActionPerformed

	private void ALL_numSpecsUniqCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_numSpecsUniqCBActionPerformed
		Globals.printC.add("numSpecsUniq");
}//GEN-LAST:event_ALL_numSpecsUniqCBActionPerformed

	private void ALL_numSpecsTotCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_numSpecsTotCBActionPerformed
		Globals.printC.add("numSpecsTot");
}//GEN-LAST:event_ALL_numSpecsTotCBActionPerformed

	private void ALL_numPepsUniqCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_numPepsUniqCBActionPerformed
		Globals.printC.add("numPepsUniq");
}//GEN-LAST:event_ALL_numPepsUniqCBActionPerformed

	private void ALL_numPepsTotCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_numPepsTotCBActionPerformed
		Globals.printC.add("numPepsTot");
}//GEN-LAST:event_ALL_numPepsTotCBActionPerformed

	private void maxIniProbUniqCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxIniProbUniqCBActionPerformed
		Globals.printC.add("maxIniProbUniq");
}//GEN-LAST:event_maxIniProbUniqCBActionPerformed

	private void wt_maxIniProbCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wt_maxIniProbCBActionPerformed
		Globals.printC.add("wt_maxIniProb");
}//GEN-LAST:event_wt_maxIniProbCBActionPerformed

	private void maxIniProbCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxIniProbCBActionPerformed
		Globals.printC.add("maxIniProb");
}//GEN-LAST:event_maxIniProbCBActionPerformed

	private void ALL_localPwCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_localPwCBActionPerformed
		Globals.printC.add("localPw");
}//GEN-LAST:event_ALL_localPwCBActionPerformed

	private void ALL_PwCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_PwCBActionPerformed
		Globals.printC.add("allPw");
}//GEN-LAST:event_ALL_PwCBActionPerformed

	private void maxPwCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxPwCBActionPerformed
		Globals.printC.add("maxPw");
}//GEN-LAST:event_maxPwCBActionPerformed

	private void ALL_IDCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALL_IDCBActionPerformed
		Globals.printC.add("id");
}//GEN-LAST:event_ALL_IDCBActionPerformed

	private void numXMLCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numXMLCBActionPerformed
		Globals.printC.add("numXML");
}//GEN-LAST:event_numXMLCBActionPerformed

	private void deflineCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deflineCBActionPerformed
		Globals.printC.add("defline");
}//GEN-LAST:event_deflineCBActionPerformed

	private void isFwdCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isFwdCBActionPerformed
		Globals.printC.add("isFwd");
}//GEN-LAST:event_isFwdCBActionPerformed

	private void protLenCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protLenCBActionPerformed
		Globals.printC.add("protLen");
}//GEN-LAST:event_protLenCBActionPerformed

	private void geneidCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneidCBActionPerformed
		Globals.printC.add("geneid");
}//GEN-LAST:event_geneidCBActionPerformed

	private void protidCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protidCBActionPerformed
		Globals.printC.add("protid");
}//GEN-LAST:event_protidCBActionPerformed

	private void qspecRB_geneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qspecRB_geneActionPerformed
		// sets the output to be 'gene qspec'
		Globals.outputFormat = Globals.geneQspecFormat;

		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");
		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_forQspec.tsv");

		// Make the custom output menu invisible
		protidCB.setEnabled(false);
		isFwdCB.setEnabled(false);
		deflineCB.setEnabled(false);
		geneidCB.setEnabled(false);

		maxIniProbCB.setEnabled(false);
		wt_maxIniProbCB.setEnabled(false);
		maxIniProbUniqCB.setEnabled(false);
		maxPwCB.setEnabled(false);
		numXMLCB.setEnabled(false);
		protLenCB.setEnabled(false);

		ALL_IDCB.setEnabled(false);
		ALL_PwCB.setEnabled(false);
		ALL_localPwCB.setEnabled(false);
		ALL_numPepsTotCB.setEnabled(false);
		ALL_numPepsUniqCB.setEnabled(false);
		ALL_numSpecsTotCB.setEnabled(false);
		ALL_numSpecsUniqCB.setEnabled(false);

		Expt_IDCB.setEnabled(false);
		Expt_PwCB.setEnabled(false);
		Expt_numPepsTotCB.setEnabled(false);
		Expt_numPepsUniqCB.setEnabled(false);
		Expt_numSpecsTotCB.setEnabled(false);
		Expt_numSpecsUniqCB.setEnabled(false);
		Expt_numSpecsAdjCB.setEnabled(false);
	}//GEN-LAST:event_qspecRB_geneActionPerformed

	private void peptideOutputRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptideOutputRBActionPerformed
		Globals.byPeptide = true;
		Globals.outputFormat = Globals.peptideOutput;
		
		if(Globals.outputPath == null) Globals.outputPath = System.getProperty("user.dir") + System.getProperty("file.separator");
		this.outputFileTextField.setText(Globals.outputPath + "ABACUS_peptide.tsv");
		
		// Make the custom output menu invisible
		protidCB.setEnabled(false);
		isFwdCB.setEnabled(false);
		deflineCB.setEnabled(false);
		geneidCB.setEnabled(false);

		maxIniProbCB.setEnabled(false);
		wt_maxIniProbCB.setEnabled(false);
		maxIniProbUniqCB.setEnabled(false);
		maxPwCB.setEnabled(false);
		numXMLCB.setEnabled(false);
		protLenCB.setEnabled(false);

		ALL_IDCB.setEnabled(false);
		ALL_PwCB.setEnabled(false);
		ALL_localPwCB.setEnabled(false);
		ALL_numPepsTotCB.setEnabled(false);
		ALL_numPepsUniqCB.setEnabled(false);
		ALL_numSpecsTotCB.setEnabled(false);
		ALL_numSpecsUniqCB.setEnabled(false);

		Expt_IDCB.setEnabled(false);
		Expt_PwCB.setEnabled(false);
		Expt_numPepsTotCB.setEnabled(false);
		Expt_numPepsUniqCB.setEnabled(false);
		Expt_numSpecsTotCB.setEnabled(false);
		Expt_numSpecsUniqCB.setEnabled(false);
		Expt_numSpecsAdjCB.setEnabled(false);
	}//GEN-LAST:event_peptideOutputRBActionPerformed

	private void recalcPepWtCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalcPepWtCBActionPerformed
		Globals.recalcPepWts = true;
	}//GEN-LAST:event_recalcPepWtCBActionPerformed


	/*****************
	 *
	 * Check all of user's input before running hyperSpec
	 *
	 */
	 public boolean errorChecking() {
		 String err;
		 File tf;
		 boolean fastaFileGiven = true;
		 
		 if( (null == Globals.fastaFile) || Globals.fastaFile.isEmpty() ) fastaFileGiven = false;
		 
		 if( this.dbNameTextField.getText().trim().equals("") ) {
			 err = "'dbName' cannot be blank.";
			 guiAlert(err);
			 this.dbNameTextField.requestFocus();
			 return false;
		 }

		 if( this.maxIniProbTextField.getText().trim().equals("") ) {
			 err = "'maxIniProb Threshold' cannot be blank.";
			 guiAlert(err);
			 this.maxIniProbTextField.requestFocus();
			 return false;
		 }

		 if( this.iniProbTextField.getText().trim().equals("") ) {
			 err = "'iniProb Threshold' cannot be blank.";
			 guiAlert(err);
			 this.iniProbTextField.requestFocus();
			 return false;
		 }

		 if( this.epiTextField.getText().trim().isEmpty()) {
			 this.epiTextField = this.iniProbTextField;
		 }

		 if( this.minCombinedFilePwTextField.getText().trim().equals("") ) {
			 err = "'Combined File Prob' cannot be blank.";
			 guiAlert(err);
			 this.minCombinedFilePwTextField.requestFocus();
			 return false;
		 }


		 if( this.srcDirTextField.getText().trim().equals("") ) {
			 err = "'Source Directory' cannot be blank.";
			 guiAlert(err);
			 this.srcDirTextField.requestFocus();
			 return false;
		 }

//		 if( this.fastaTextField.getText().trim().equals("") && !globals.byPeptide ) {
//			 err = "'FASTA File' cannot be blank.";
//			 guiAlert(err);
//			 this.fastaTextField.requestFocus();
//			 return false;
//		 }

		 if( this.combinedFileTextField.getText().trim().equals("") && !Globals.byPeptide ) {
			 err = "'Combined File' cannot be blank.";
			 guiAlert(err);
			 this.combinedFileTextField.requestFocus();
			 return false;
		 }

		 if( this.outputFileTextField.getText().trim().equals("") ) {
			 err = "'Output File' cannot be blank.";
			 guiAlert(err);
			 this.outputFileTextField.requestFocus();
			 return false;
		 }


		 if( this.qspecRB_gene.isSelected() && this.nsafCB.isSelected() ) {
			 err = "QSpec does not accept NSAF values as input.\n"
			     + "Please uncheck the NSAF option.";
			 guiAlert(err);
			 this.nsafCB.requestFocus();
			 return false;
		 }


		 if( this.qspecRB_prot.isSelected() && this.nsafCB.isSelected() ) {
			 err = "QSpec does not accept NSAF values as input.\n"
			     + "Please uncheck the NSAF option.";
			 guiAlert(err);
			 this.nsafCB.requestFocus();
			 return false;
		 }

		 if( this.qspecRB_prot.isSelected() && (fastaFileGiven == false)) {
			 err = "QSpect output requires protein lengths.\n"
				 + "Please provide a FASTA file.";
			 guiAlert(err);
			 return false;
		 }
		 
		 if( this.qspecRB_gene.isSelected() && (fastaFileGiven == false)) {
			 err = "QSpect output requires protein lengths.\n"
				 + "Please provide a FASTA file.";
			 guiAlert(err);
			 return false;
		 }
		 
		 if( this.nsafCB.isSelected() && (fastaFileGiven == false)) {
			 err = "NSAF output requires protein lengths.\n"
				 + "Please provide a FASTA file or uncheck the NSAF box.";
			 guiAlert(err);
			 this.nsafCB.requestFocus();
			 return false;
		 }
		 
		 
		 
		 // now check to see if the files the user selected exist
		 tf = new File (this.srcDirTextField.getText().trim());
		 if(!tf.exists()) {
			 String fn = tf.getName();
			 err = "Source Directory Folder '" + fn + "' could not be found!";
			 guiAlert(err);
			 this.srcDirTextField.requestFocus();
			 tf = null;
			 return false;
		 }

//		 if(!globals.byPeptide) {
//			tf = new File (this.fastaTextField.getText().trim());
//			if(!tf.exists()) {
//				String fn = tf.getName();
//				err = "FASTA file '" + fn + "' could not be found!";
//				guiAlert(err);
//				this.fastaTextField.requestFocus();
//				tf = null;
//				return false;
//			}
//		 }

		 // only check the gene2protTextField if the user provided input for it
		 if( !this.gene2protTextField.getText().trim().equals("") ) {
			 tf = new File (this.gene2protTextField.getText().trim());
			 if(!tf.exists()) {
				 String fn = tf.getName();
				 err = "Gene Map File '" + fn + "' could not be found!";
				 guiAlert(err);
				 this.gene2protTextField.requestFocus();
				 tf = null;
				 return false;
			 }
		 }

		 if(!Globals.byPeptide) {
			tf = new File (this.combinedFileTextField.getText().trim());
			if(!tf.exists()) {
				String fn = tf.getName();
				err = "Combined File '" + fn + "' could not be found!";
				guiAlert(err);
				this.combinedFileTextField.requestFocus();
				tf = null;
				return false;
			}
		 }

		 // This spot of code checks to see if the path the user has specified
		 // for the output file exists and is valid.
		 String opf = this.outputFileTextField.getText().trim();
		 tf = new File(opf);
		 String parentPath = tf.getParent();

		 // when parentPath is null, assume the current working directory
		 if(parentPath == null) {
			 parentPath = System.getProperty("user.dir") + System.getProperty("file.separator");
			 String fullPath_opf = parentPath + opf;
			 this.outputFileTextField.setText(fullPath_opf);
		 }
		 else {
			 tf = null;
			 tf = new File(parentPath);
			 if(!tf.exists()) {
				 err = "The path for the output file: '" + parentPath + "' does not exists!";
				 guiAlert(err);
				 this.outputFileTextField.requestFocus();
				 tf = null;
				 return false;
			 }
		 }

			 tf = null;


		 // Check to see if the user has selected the 'Gene' output opton.
		 // If so, verify they have provided a gene2prot mapping file
		 if( this.geneRB.isSelected() ) {
			 if( this.gene2protTextField.getText().trim().equals("") ) {
				 err = "Please provide a Gene Map File.";
				 guiAlert(err);
				 this.gene2protTextField.requestFocus();
				 return false;
			 }
			 else {
				 tf = new File (this.gene2protTextField.getText().trim());
				 if(!tf.exists()) {
					 String fn = tf.getName();
					 err = "Gene Map file '" + fn + "' could not be found!";
					 guiAlert(err);
					 this.gene2protTextField.requestFocus();
					 tf = null;
					 return false;
				 }
			 }
		 }

		 // If the user requested the Custom output option, verify they
		 // selected at least some columns to be printed out
		 if( this.customRB.isSelected() ) {
			 boolean somethingIsChecked = false;

			 if(this.ALL_IDCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_PwCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_localPwCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_numPepsTotCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_numPepsUniqCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_numSpecsTotCB.isSelected()) somethingIsChecked = true;
			 if(this.ALL_numSpecsUniqCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_IDCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_PwCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_numPepsTotCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_numPepsUniqCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_numSpecsTotCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_numSpecsUniqCB.isSelected()) somethingIsChecked = true;
			 if(this.Expt_numSpecsAdjCB.isSelected()) somethingIsChecked = true;
			 if(this.protidCB.isSelected()) somethingIsChecked = true;
			 if(this.geneidCB.isSelected()) somethingIsChecked = true;
			 if(this.maxIniProbCB.isSelected()) somethingIsChecked = true;
			 if(this.wt_maxIniProbCB.isSelected()) somethingIsChecked = true;
			 if(this.maxIniProbUniqCB.isSelected()) somethingIsChecked = true;
			 if(this.deflineCB.isSelected()) somethingIsChecked = true;
			 if(this.numXMLCB.isSelected()) somethingIsChecked = true;
			 if(this.protLenCB.isSelected()) somethingIsChecked = true;
			 if(this.maxPwCB.isSelected()) somethingIsChecked = true;
			 if(this.isFwdCB.isSelected()) somethingIsChecked = true;

			 if(somethingIsChecked == false) {
				 err = "For 'Custom' output select at least 1 field.";
				 guiAlert(err);
				 return false;
			 }
		 }

		 // if you made it this far, all of your input must be okay
		 return true;
	 }


	 /**************
	  *
	  * Function creates an alert box warning user of an error
	  *
	  */
	 public void guiAlert(String err) {
		 JOptionPane.showMessageDialog(rootPane, err, "Douh!", JOptionPane.WARNING_MESSAGE);
	 }

    /****************************
     *
     * @param args the command line arguments
     *
     */
    public void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbacusUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ALL_IDCB;
    private javax.swing.JCheckBox ALL_PwCB;
    private javax.swing.JCheckBox ALL_localPwCB;
    private javax.swing.JCheckBox ALL_numPepsTotCB;
    private javax.swing.JCheckBox ALL_numPepsUniqCB;
    private javax.swing.JCheckBox ALL_numSpecsTotCB;
    private javax.swing.JCheckBox ALL_numSpecsUniqCB;
    private javax.swing.JLabel CombinedFileLabel;
    private javax.swing.JButton ExitButton;
    private javax.swing.JCheckBox Expt_IDCB;
    private javax.swing.JCheckBox Expt_PwCB;
    private javax.swing.JCheckBox Expt_numPepsTotCB;
    private javax.swing.JCheckBox Expt_numPepsUniqCB;
    private javax.swing.JCheckBox Expt_numSpecsAdjCB;
    private javax.swing.JCheckBox Expt_numSpecsTotCB;
    private javax.swing.JCheckBox Expt_numSpecsUniqCB;
    private javax.swing.JLabel FastaFileLabel;
    private javax.swing.JPanel FastaPanel;
    private javax.swing.JLabel GeneMapLabel;
    private javax.swing.JButton RunButton;
    private javax.swing.JButton SaveParamsButton;
    private javax.swing.JLabel SrcDirLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearFormButton;
    private javax.swing.JButton combinedFileBrowseButton;
    private javax.swing.JPanel combinedFilePanel;
    private javax.swing.JLabel combinedFilePwLabel;
    private javax.swing.JTextField combinedFileTextField;
    private javax.swing.JRadioButton customRB;
    private javax.swing.JTextField dbNameTextField;
    private javax.swing.JTextField decoyTagTextField;
    private javax.swing.JRadioButton defaultOutputRB;
    private javax.swing.JCheckBox deflineCB;
    private javax.swing.JLabel epiLabel;
    private javax.swing.JTextField epiTextField;
    private javax.swing.JButton fastaBrowseButton;
    private javax.swing.JTextField fastaTextField;
    private javax.swing.JButton gene2protBrowseButton;
    private javax.swing.JTextField gene2protTextField;
    private javax.swing.JPanel genePanel;
    private javax.swing.JRadioButton geneRB;
    private javax.swing.JCheckBox geneidCB;
    private javax.swing.JLabel iniProbTHlabel;
    private javax.swing.JTextField iniProbTextField;
    private javax.swing.JCheckBox isFwdCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel4_customOutput;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JCheckBox keepDBCB;
    private javax.swing.JCheckBox maxIniProbCB;
    private javax.swing.JTextField maxIniProbTextField;
    private javax.swing.JCheckBox maxIniProbUniqCB;
    private javax.swing.JCheckBox maxPwCB;
    private javax.swing.JLabel maxiniProbLabel;
    private javax.swing.JTextField minCombinedFilePwTextField;
    private javax.swing.JCheckBox nsafCB;
    private javax.swing.JCheckBox numXMLCB;
    private javax.swing.JButton outputFileButton;
    private javax.swing.JLabel outputFileLabel;
    private javax.swing.JPanel outputFilePanel;
    private javax.swing.JTextField outputFileTextField;
    private javax.swing.ButtonGroup outputRBgroup;
    private javax.swing.JButton paramFileBrowseButton;
    private javax.swing.JTextField paramFileTextField;
    private javax.swing.JTextField pepRegexTextField;
    private javax.swing.JRadioButton peptideOutputRB;
    private javax.swing.JCheckBox protLenCB;
    private javax.swing.JCheckBox protidCB;
    private javax.swing.JRadioButton qspecRB_gene;
    private javax.swing.JRadioButton qspecRB_prot;
    private javax.swing.JCheckBox recalcPepWtCB;
    private javax.swing.JButton srcDirBrowseButton;
    private javax.swing.JPanel srcDirPanel;
    private javax.swing.JTextField srcDirTextField;
    private javax.swing.JCheckBox verboseResultsCB;
    private javax.swing.JCheckBox wt_maxIniProbCB;
    // End of variables declaration//GEN-END:variables


	// Function un-checks all fields in the custom output box
	private void clearCustomOptions() {
        protidCB.setSelected(false);
        isFwdCB.setSelected(false);
        deflineCB.setSelected(false);
        geneidCB.setSelected(false);
		recalcPepWtCB.setSelected(false);
		keepDBCB.setSelected(false);

        maxIniProbCB.setSelected(false);
        wt_maxIniProbCB.setSelected(false);
        maxIniProbUniqCB.setSelected(false);
        maxPwCB.setSelected(false);
        numXMLCB.setSelected(false);
        protLenCB.setSelected(false);

        ALL_IDCB.setSelected(false);
        ALL_PwCB.setSelected(false);
        ALL_localPwCB.setSelected(false);
        ALL_numPepsTotCB.setSelected(false);
        ALL_numPepsUniqCB.setSelected(false);
        ALL_numSpecsTotCB.setSelected(false);
        ALL_numSpecsUniqCB.setSelected(false);

        Expt_IDCB.setSelected(false);
        Expt_PwCB.setSelected(false);
        Expt_numPepsTotCB.setSelected(false);
        Expt_numPepsUniqCB.setSelected(false);
        Expt_numSpecsTotCB.setSelected(false);
        Expt_numSpecsUniqCB.setSelected(false);
        Expt_numSpecsAdjCB.setSelected(false);
	}



        /**
 * This class extends the Thread class so all the magic can happen here.
 */
class WorkerThread extends Thread {

    AbacusTextArea console;
    Abacus pmasc;
    AbacusUIAlerter alerter = new AbacusUIAlerter();

    File dir = null;
    Connection conn = null;
    HyperSQLObject forProteins = null;
    HyperSQLObjectGene forGenes = null;
    String db = "jdbc:hsqldb";

    String err; // used for error messages

    // This method is called when the thread runs
    @Override
    public void run() {
        String timeStr = null;
        long start_time = System.currentTimeMillis();
        long elapsed_time = 0;

        pmasc = new Abacus();
        console = new AbacusTextArea();
        console.setVisible(true);
        console.append(pmasc.printHeader());
        console.append(Globals.printParameters());

        dir = new File(Globals.srcDir);


        try {
            pmasc.cleanup(console);
            pmasc.record_XML_files(dir); // record only the protXML and pepXML files
            pmasc.checkPepXmlFiles(console, alerter, console);
            pmasc.checkProtXmlFiles(console, alerter, console);
            pmasc.checkFastaFile(console, alerter, console);
            if (!checkFastaFile(System.err, null, null)) return;
            if (!Globals.byPeptide) {
                if (Globals.fastaFile == null || Globals.fastaFile.isEmpty()) {
                    console.append("No fasta file was given so protein lengths will not be reported\n\n");
                } else {
                    console.append("Retrieving protein lengths from '" + Globals.fastaFile + "'\n\n");
                    if (Globals.parseFasta(console, alerter, console)) {
                        return; // exit this thread
                    }
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(WorkerThread.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
         * By default, the program stores the database in memory.
         * If the user wants to keep the database, this code allows them to.
         * NOTE: writing to disk is much slower!!!
         */
        if (Globals.keepDB) {
            db += ":file:" + Globals.DBname;
            console.append("\nDatabase will be written to disk within the following files and folders:\n");
            console.append("\t" + Globals.DBname + ".script\n");
            console.append("\t" + Globals.DBname + ".properties\n");
            console.append("\t" + Globals.DBname + ".tmp\n\n");
            console.append("NOTE: Writing to disk slows things down so please be patient...\n\n");
        } else {
            db += ":mem:memoryDB"; //default method, do everything in memory
        }

        //Connect to hyperSQL database object
        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
            conn = DriverManager.getConnection(db, "SA", "");
        } catch (ClassNotFoundException | SQLException e) {
            alerter.alert(AbacusUI.this);
            console.append("There was an error connecting to the HyperSQL database\n");
            console.append(e.toString());
            return;
        }

        System.gc(); // System clean up

        try {
            if (!Globals.byPeptide) {
                if (pmasc.load_protXML(conn, console)) {
                    alerter.alert(AbacusUI.this);
                    console.changeCloseStatus("allowClose");
                    return;
                }
                console.append("\n");
            }
        } catch (Exception e) {
            alerter.alert(AbacusUI.this);
            console.append("Error parsing protXML files\n");
            console.append(e.toString());
            console.changeCloseStatus("allowClose");
            return;
        }

        try {
            if (pmasc.load_pepXML(conn, console)) {
                alerter.alert(AbacusUI.this);
                console.changeCloseStatus("allowClose");
                return;
            }
            console.append("\n");

        } catch (Exception e) {
            alerter.alert(AbacusUI.this);
            console.append("Error parsing pepXML files\n");
            console.append(e.toString());
            console.changeCloseStatus("allowClose");
            return;
        }
        console.updateProgress(1);

        // now the work begins
        try {

            if (Globals.byPeptide) { // user wants peptide-level results
                forProteins = new HyperSQLObject();
                forProteins.initialize();
                forProteins.makeSrcFileTable(conn, console);

                forProteins.correctPepXMLTags(conn);
                console.updateProgress(1);

                forProteins.peptideLevelResults(conn, console);
                console.updateProgress(20);
            } else if (Globals.byGene) { // user wants gene-centric output

                forGenes = new HyperSQLObjectGene();
                forGenes.initialize();

                //forGenes.makeProtLenTable(conn, console); //deprecated function
                forGenes.makeSrcFileTable(conn, console);
                console.updateProgress(1);

                forGenes.correctPepXMLTags(conn);

                if (forGenes.makeGeneTable(conn, console)) {
                    alerter.alert(AbacusUI.this);
                    console.changeCloseStatus("allowClose");
                    return;
                }
                console.updateProgress(1);

                forGenes.makeCombinedTable(conn, console);
                console.updateProgress(1);

                forGenes.makeProtXMLTable(conn, console);
                console.updateProgress(1);

                System.gc(); // need more RAM

                forGenes.makeGeneCombined(conn, console);
                console.updateProgress(1);

                forGenes.makeGeneXML(conn, console);
                console.updateProgress(1);

                forGenes.adjustGenePeptideWT(conn, console);
                console.updateProgress(1);

                forGenes.makeTempGene2pepTable(conn);

                System.gc(); // System clean up

                console.changeBarType("shaker");
                forGenes.makeGeneidSummary(conn, console);
                console.changeBarType("progress");
                console.updateProgress(1);

                forGenes.makeGeneResults(conn, console);
                console.updateProgress(1);

                console.changeBarType("shaker");
                forGenes.makeGenePepUsageTable(conn, console);
                console.changeBarType("progress");
                console.updateProgress(1);

                System.gc(); // System clean up

                console.changeBarType("shaker");
                forGenes.appendIndividualExpts_GC(conn, console);
                console.changeBarType("progress");
                console.append("\n");

                if (Globals.doNSAF) {
                    forGenes.getNSAF_values_gene(conn, console);
                    console.append("\n");
                }

                console.updateProgress(1);

                if (Globals.genesHaveDescriptions) { // append gene descriptions
                    forGenes.appendGeneDescriptions(conn);
                    console.updateProgress(1);
                } else {
                    console.updateProgress(2);
                }

                // choose output format
                if (Globals.outputFormat == Globals.geneQspecFormat) {
                    forGenes.formatQspecOutput(conn, console);
                } else {
                    forGenes.defaultResults(conn, console);
                }

                console.updateProgress(1);
            } else { // default protein-centric output
                forProteins = new HyperSQLObject();
                forProteins.initialize();

                //forProteins.makeProtLenTable(conn, console); // deprecated function
                forProteins.makeSrcFileTable(conn, console);
                console.updateProgress(1);

                forProteins.correctPepXMLTags(conn);
                forProteins.makeCombinedTable(conn, console);
                console.updateProgress(1);

                forProteins.makeProtXMLTable(conn, console);
                console.updateProgress(1);

                System.gc(); // need more RAM

                forProteins.makeTempProt2PepTable(conn, console);

                System.gc(); // System clean up

                //console.changeBarType("shaker");
                forProteins.makeProtidSummary(conn, console);
                //console.changeBarType("progress");
                console.updateProgress(1);

                if (Globals.gene2protFile != null) {
                    forProteins.makeGeneTable(conn, console);
                    forProteins.appendGeneIDs(conn, console);
                    console.append("\n");

                }

                if (forProteins.makeResultsTable(conn, console)) {
                    alerter.alert(AbacusUI.this);
                    console.append("\nError creating results table.\n");
                    console.changeCloseStatus("allowClose");
                    return;
                }
                console.updateProgress(1);

                forProteins.addProteinLengths(conn, console, 0);
                console.updateProgress(1);

                // these functions deal with adjusting spectral counts
                forProteins.makeWT9XgroupsTable(conn);
                forProteins.makePepUsageTable(conn, console);
                console.updateProgress(1);

                // add individual experiment data to results table
                forProteins.appendIndividualExpts(conn, console);
                console.updateProgress(1);

				// reduce the number of columns in the results table
                // by merging the groupid and siblingGroup fields
                forProteins.mergeIDfields(conn);

                if (Globals.doNSAF) {
                    forProteins.getNSAF_values_prot(conn, console);
                    console.changeCloseStatus("allowClose");
                    console.append("\n");
                }

                if (Globals.makeVerboseOutput) {
                    forProteins.addExtraProteins(conn, console);
                    forProteins.addProteinLengths(conn, console, 1);
                }

                // choose output format
                switch (Globals.outputFormat) {
                    case Globals.protQspecFormat:
                        forProteins.formatQspecOutput(conn, console);
                        break;
                    case Globals.customOutput:
                        forProteins.customOutput(conn, console);
                        break;
                    default:
                        forProteins.defaultResults(conn, console);
                }
                console.updateProgress(1);
            }

            // user has elected to keep database, remove unnecessary tables.
            if (Globals.keepDB) {
                if (Globals.byGene) {
                    forGenes.cleanUp(conn);
                } else {
                    forProteins.cleanUp(conn);
                }
            } else { // left over files that should be removed
                String tmpFile = "" + Globals.DBname + ".properties";
                File f = new File(tmpFile);
                if (f.exists()) {
                    f.delete();
                }
            }

            console.changeCloseStatus("allowClose");

            elapsed_time = System.currentTimeMillis() - start_time;
            timeStr = Globals.formatTime(elapsed_time);
            console.append("\n\nTotal runtime (hh:mm:ss): " + timeStr + "\n");

            console.append("\nYou may now close this window\n\n");
        } catch (Exception ex) {
            Logger.getLogger(WorkerThread.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                // Whatever happens, shutdown the HSQLDB connection nicely
                conn.createStatement().execute("SHUTDOWN");
                conn.close();
                conn = null;

            } catch (Exception e) {
                console.append(e.toString());
                console.changeCloseStatus("allowClose");
            }
        }

        // clean up
        pmasc = null;
        System.gc();
    }


}

}



